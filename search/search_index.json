{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"fprules \u00b6 make -like file pattern rules for build tools such as doit . In GNU make there is a powerful concept that many users love for its compacity and expressiveness: so-called \" pattern rules \". The concept is extremely simple: you define a recipe for each file matching a certain pattern, that recipe typically leads to creating one or more files. The names of these files are created based on the name of the original file For example: %.tab.c %.tab.h : %. y bison -d $< tells make that the recipe bison -d foo.y will make both foo.tab.c and foo.tab.h . The goal of fprules is to provide similar functionality in python, but to decouple it from the build tool itself - so that you can use it in any python task-oriented build tool of your choice, such as doit . Installing \u00b6 > pip install fprules Usage \u00b6 1 source file -> 1 target file \u00b6 In this fictitious example we have a bunch of *.ddl files in a defs/ folder. Each of them contains a URL to a remote csv file. For example you can look at iris.ddl . We wish to create a download task for each of them, so that the task is named after the .ddl file name and the destination of the download is a new .csv file under folder downloaded/ . Thanks to fprules we can easily generate a to-do list: from fprules import file_pattern # define the pattern to create a generator ddl_task_generator = file_pattern ( './defs/*.ddl' , './downloaded/%.csv' ) # print the contents of the to-do list for t in ddl_task_generator : print ( t ) yields: [ iris.ddl ] defs/iris.ddl -> downloaded/iris.csv [ wine.ddl ] defs/wine.ddl -> downloaded/wine.csv We can then create the tasks with our preferred build tool. For example with doit we can create the following dodo.py file. Note: this code requires wget . from wget import download from fprules import file_pattern def download_from_ddl_def ( ddl_file , csv_path ): \"\"\" download csv file to `csv_path` from url in `ddl_file` \"\"\" # Read the URL from the file with open ( ddl_file ) as f : ddl_url = f . readline () . strip ( ' \\n\\r ' ) # Download print ( \"== Downloading file from %s to %s \" % ( ddl_url , csv_path )) download ( str ( ddl_url ), str ( csv_path )) def task_download_data (): \"\"\" Downloads file `./downloaded/<dataset>.csv` for each def file `./defs/<dataset>.ddl`. \"\"\" for data in file_pattern ( './defs/*.ddl' , './downloaded/%.csv' ): yield { 'name' : data . name , 'file_dep' : [ data . src_path ], 'actions' : [( download_from_ddl_def , (), dict ( ddl_file = data . src_path , csv_path = data . dst_path ))], 'verbosity' : 2 , 'targets' : [ data . dst_path ] } doit lists the tasks correctly: >>> doit list --all download_data Downloads file ` ./downloaded/<dataset>.csv ` for each def file ` ./defs/<dataset>.ddl ` . download_data:iris download_data:wine And execution of the task group works as expected: >>> doit download_data . download_data:iris == Downloading file from https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data to downloaded \\i ris.csv 5 .00KB [ 00 :00, 4 .86kKB/s ] . download_data:wine == Downloading file from https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data to downloaded \\w ine.csv 11 .0KB [ 00 :00, 5 .43kKB/s ] Patterns syntax \u00b6 Basics \u00b6 TODO Variable paths \u00b6 TODO 1 source file -> n target files \u00b6 It is possible to declare multiple destination patterns by passing a dict dst_pattern instead of a single element. In that case the resulting list will contain FileItem instances that have one attribute per pattern. TODO Main features / benefits \u00b6 TODO See Also \u00b6 Concerning the strategies: The doit task-oriented automation tool doit-api , a plugin to make doit easier to use Related stack overflow discussions: discussion 1 Others \u00b6 Do you like this library ? You might also like my other python libraries Want to contribute ? \u00b6 Details on the github page: https://github.com/smarie/python-fprules","title":"Home"},{"location":"#fprules","text":"make -like file pattern rules for build tools such as doit . In GNU make there is a powerful concept that many users love for its compacity and expressiveness: so-called \" pattern rules \". The concept is extremely simple: you define a recipe for each file matching a certain pattern, that recipe typically leads to creating one or more files. The names of these files are created based on the name of the original file For example: %.tab.c %.tab.h : %. y bison -d $< tells make that the recipe bison -d foo.y will make both foo.tab.c and foo.tab.h . The goal of fprules is to provide similar functionality in python, but to decouple it from the build tool itself - so that you can use it in any python task-oriented build tool of your choice, such as doit .","title":"fprules"},{"location":"#installing","text":"> pip install fprules","title":"Installing"},{"location":"#usage","text":"","title":"Usage"},{"location":"#1-source-file-1-target-file","text":"In this fictitious example we have a bunch of *.ddl files in a defs/ folder. Each of them contains a URL to a remote csv file. For example you can look at iris.ddl . We wish to create a download task for each of them, so that the task is named after the .ddl file name and the destination of the download is a new .csv file under folder downloaded/ . Thanks to fprules we can easily generate a to-do list: from fprules import file_pattern # define the pattern to create a generator ddl_task_generator = file_pattern ( './defs/*.ddl' , './downloaded/%.csv' ) # print the contents of the to-do list for t in ddl_task_generator : print ( t ) yields: [ iris.ddl ] defs/iris.ddl -> downloaded/iris.csv [ wine.ddl ] defs/wine.ddl -> downloaded/wine.csv We can then create the tasks with our preferred build tool. For example with doit we can create the following dodo.py file. Note: this code requires wget . from wget import download from fprules import file_pattern def download_from_ddl_def ( ddl_file , csv_path ): \"\"\" download csv file to `csv_path` from url in `ddl_file` \"\"\" # Read the URL from the file with open ( ddl_file ) as f : ddl_url = f . readline () . strip ( ' \\n\\r ' ) # Download print ( \"== Downloading file from %s to %s \" % ( ddl_url , csv_path )) download ( str ( ddl_url ), str ( csv_path )) def task_download_data (): \"\"\" Downloads file `./downloaded/<dataset>.csv` for each def file `./defs/<dataset>.ddl`. \"\"\" for data in file_pattern ( './defs/*.ddl' , './downloaded/%.csv' ): yield { 'name' : data . name , 'file_dep' : [ data . src_path ], 'actions' : [( download_from_ddl_def , (), dict ( ddl_file = data . src_path , csv_path = data . dst_path ))], 'verbosity' : 2 , 'targets' : [ data . dst_path ] } doit lists the tasks correctly: >>> doit list --all download_data Downloads file ` ./downloaded/<dataset>.csv ` for each def file ` ./defs/<dataset>.ddl ` . download_data:iris download_data:wine And execution of the task group works as expected: >>> doit download_data . download_data:iris == Downloading file from https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data to downloaded \\i ris.csv 5 .00KB [ 00 :00, 4 .86kKB/s ] . download_data:wine == Downloading file from https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data to downloaded \\w ine.csv 11 .0KB [ 00 :00, 5 .43kKB/s ]","title":"1 source file -&gt; 1 target file"},{"location":"#patterns-syntax","text":"","title":"Patterns syntax"},{"location":"#basics","text":"TODO","title":"Basics"},{"location":"#variable-paths","text":"TODO","title":"Variable paths"},{"location":"#1-source-file-n-target-files","text":"It is possible to declare multiple destination patterns by passing a dict dst_pattern instead of a single element. In that case the resulting list will contain FileItem instances that have one attribute per pattern. TODO","title":"1 source file -&gt; n target files"},{"location":"#main-features-benefits","text":"TODO","title":"Main features / benefits"},{"location":"#see-also","text":"Concerning the strategies: The doit task-oriented automation tool doit-api , a plugin to make doit easier to use Related stack overflow discussions: discussion 1","title":"See Also"},{"location":"#others","text":"Do you like this library ? You might also like my other python libraries","title":"Others"},{"location":"#want-to-contribute","text":"Details on the github page: https://github.com/smarie/python-fprules","title":"Want to contribute ?"},{"location":"changelog/","text":"Changelog \u00b6 0.3.0 - Support for several double wildcards \u00b6 You can now use several double wildcards in the source pattern, as in glob . Fixes #9 0.2.3 - packaging improvements \u00b6 packaging improvements: set the \"universal wheel\" flag to 1, and cleaned up the setup.py . In particular removed dependency to six for setup and added py.typed file, as well as set the zip_safe flag to False. Removed tests folder from package. Fixes #8 0.2.2 - pyproject.toml \u00b6 Added pyproject.toml . 0.2.1 - setup.py Bugfix \u00b6 Dependency makefun was not correctly declared into setup.py . Fixes #6 . 0.2.0 - First public version \u00b6 file_pattern now returns a generator. Fixed #1 . Improved __repr__ of FileItem . Fixes #3 New names parameter to improve configurability. Fixed #2 . 0.1.0 - Internal version \u00b6 First version extracted from doit pull request #328 .","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#030-support-for-several-double-wildcards","text":"You can now use several double wildcards in the source pattern, as in glob . Fixes #9","title":"0.3.0 - Support for several double wildcards"},{"location":"changelog/#023-packaging-improvements","text":"packaging improvements: set the \"universal wheel\" flag to 1, and cleaned up the setup.py . In particular removed dependency to six for setup and added py.typed file, as well as set the zip_safe flag to False. Removed tests folder from package. Fixes #8","title":"0.2.3 - packaging improvements"},{"location":"changelog/#022-pyprojecttoml","text":"Added pyproject.toml .","title":"0.2.2 - pyproject.toml"},{"location":"changelog/#021-setuppy-bugfix","text":"Dependency makefun was not correctly declared into setup.py . Fixes #6 .","title":"0.2.1 - setup.py Bugfix"},{"location":"changelog/#020-first-public-version","text":"file_pattern now returns a generator. Fixed #1 . Improved __repr__ of FileItem . Fixes #3 New names parameter to improve configurability. Fixed #2 .","title":"0.2.0 - First public version"},{"location":"changelog/#010-internal-version","text":"First version extracted from doit pull request #328 .","title":"0.1.0 - Internal version"},{"location":"long_description/","text":"python-fprules \u00b6 make -like file pattern rules for build tools such as doit . The documentation for users is available here: https://smarie.github.io/python-fprules/ A readme for developers is available here: https://github.com/smarie/python-fprules","title":"python-fprules"},{"location":"long_description/#python-fprules","text":"make -like file pattern rules for build tools such as doit . The documentation for users is available here: https://smarie.github.io/python-fprules/ A readme for developers is available here: https://github.com/smarie/python-fprules","title":"python-fprules"}]}